{
    "script_1": "\n  const localStorageKey = 'xsso_state';\n  const minute = 60 * 1000;\n\n  // Don't allow auth attempts more often than this\n  const authTooSoon = (0.25 * minute); // should be five minutes?  TODO: ask.\n\n  /**\n   * @param {Object} item\n   */\n  function setState(item) {\n    try {\n      localStorage.setItem(localStorageKey, JSON.stringify(item));\n    } catch (ex) {\n      console.warn(`failed to parse ${item} as JSON and set to localStorage`, ex);\n    }\n  }\n\n  /**\n   * @returns Object\n   */\n  function getState() {\n    try {\n      return JSON.parse(localStorage.getItem(localStorageKey));\n    } catch (ex) {\n      console.warn(`failed to parse localStorage ${localStorageKey} as JSON`, ex);\n      return null;\n    }\n  }\n\n  /**\n   * Returns true if it is too soon to try to auth again, on any site\n   * @param {*} state\n   * @returns {boolean}\n   */\n  function isTooSoon(state) {\n    return typeof state === 'object' && state !== null && typeof state.next === 'number' && state.next > Date.now()\n  }\n\n  const isMessageForMe = (event) => getDomain(event.origin) === getDomain(location.origin);\n  const getDomain = (url) => new URL(url).hostname.split('.').slice(-2).join('.')\n  const minutesUntil = (ms) => Math.ceil((new Date(ms).getTime() - new Date().getTime()) / minute);\n\n  /**\n   *\n   * @param {string} type\n   * @param {string} [msg]\n   * @param {string} [origin='*']\n   */\n  const emitMessage = (type, msg, origin) => {\n    let str = `XSSO::${type}`;\n\n    if (msg) {\n      str += ' ' + msg;\n    }\n\n    window.parent.postMessage(str, origin || '*');\n  }\n\n  window.addEventListener('message', (event) => {\n    if (!isMessageForMe(event)) {\n      return emitMessage('invalid_origin', `expected ${getDomain(location.origin)} but received ${getDomain(event.origin)}`, event.origin);\n    }\n\n    const state = getState();\n\n    if (isTooSoon(state)) {\n      return emitMessage('too_soon', `too soon, wait ${minutesUntil(state.next)} minutes`, event.origin)\n    }\n\n    // remember not to check again until this time has passed; voluntary backoff\n    setState({next: Date.now() + authTooSoon});\n\n    const href = `${location.origin}/login?${event.data}`\n    emitMessage('login', href);\n    setTimeout(() => {\n      location.href = href;\n    }, 0)\n  })\n\n  window.addEventListener('error', (error) => {\n    emitMessage('error', error.message);\n  })\n\n  // only emit 'set' message if we came from the redirect url (or origin, if they have a safe RefererPolicy)\n  const origin = new URL(location.origin).toString();\n  const redirectURL = new URL('/redirect', location.origin).toString();\n  const referrer = new URL(document.referrer).toString();\n  if (referrer === origin || referrer === redirectURL) {\n    emitMessage('set');\n  }\n"
}