{
    "script_1": "https://chat.docusign.net/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js",
    "script_2": "https://chat.docusign.net/_next/static/chunks/webpack-a0deeec5c85c92d3.js",
    "script_3": "https://chat.docusign.net/_next/static/chunks/framework-ffee79c6390da51e.js",
    "script_4": "https://chat.docusign.net/_next/static/chunks/main-5848164edc7f05e2.js",
    "script_5": "https://chat.docusign.net/_next/static/chunks/pages/_app-ef9da0a6572b3989.js",
    "script_6": "https://chat.docusign.net/_next/static/chunks/885-d6ecc87b4abc63e3.js",
    "script_7": "https://chat.docusign.net/_next/static/chunks/pages/drift-fc5c90fb57d91be9.js",
    "script_8": "https://chat.docusign.net/_next/static/3c015_KXqSpUt3Z6KzkDp/_buildManifest.js",
    "script_9": "https://chat.docusign.net/_next/static/3c015_KXqSpUt3Z6KzkDp/_ssgManifest.js",
    "script_10": "{\"props\":{\"pageProps\":{}},\"page\":\"/drift\",\"query\":{},\"buildId\":\"3c015_KXqSpUt3Z6KzkDp\",\"nextExport\":true,\"autoExport\":true,\"isFallback\":false,\"scriptLoader\":[]}",
    "script_11": "https://js.driftt.com/conductor",
    "script_12": "/** Snippet for the iframe. Initializes the inner Drift iframe and acts as a communication layer for the parent page. */\n\nvar searchParams = window.location.search,\n    /*\n      sorry for the long var name but this is specifically needed for what is stated for...\n    */\n    urlSearchParamsObject = new URLSearchParams(searchParams),\n    ds_drt_listeningForIdentifyReturnOnFirstInit = false,\n    wasFirstReloadInitialized;\n\ntry {\n  wasFirstReloadInitialized = window.localStorage.getItem(\"DS_DRT_FIRST_INIT\") || false;\n} catch (er) {}\n\nwindow.drift =\n  window.drift ||\n  function () {\n    (drift.q = drift.q || []).push(arguments);\n  };\n\n// rebroadcast drift widget API events to parent page\ndrift('on', 'iframeResize', function (data) {\n  window.parent.postMessage({ type: 'driftIframeResize', data }, '*');\n});\n\n[\"ready\",\n\"startConversation\",\n\"gdprClicked\",\n\"conversation:selected\",\n\"campaign:open\",\n\"campaign:click\",\n\"campaign:dismiss\",\n\"campaign:submit\",    \n\"chatOpen\",\n\"chatClose\",\n\"message:sent\",\n\"message\",\n\"emailCapture\",\n\"phoneCapture\",\n\"scheduling:requestMeeting\",\n\"scheduling:meetingBooked\",\n\"conversation:playbookFired\",\n\"conversation:playbookClicked\",\n\"conversation:playbookDismissed\",\n\"conversation:buttonClicked\",\n\"conversation:firstInteraction\",\n\"welcomeMessage:open\",\n\"welcomeMessage:close\"].forEach(function(event) {\n  drift('on', event, function (eventData, eventPayload) {\n    const data = (\n      eventPayload || /* passing in the existence of a second argument - for example ready has two arguments but the second is what we want */\n      eventData || /* otherwise pass the first as most drift event signatures only have one argument */\n      {} /* passing an empty object in the instance the event signature has no arguments */\n    );\n\n    try {\n      window.parent.postMessage({type: 'ds_drift_event', event, data}, '*');\n    } catch {\n      /*\n        not doing anything with the error in this catch, just using it in the instance the expected signature doesnt fit the format\n        that we expect OR more important any DOMException errors that would bork the message passing (the events like chatOpen have\n        no arguments so but using the catch in order to not throw an error to the window)\n      */\n      window.parent.postMessage({type: 'ds_drift_event', event}, '*');\n    }\n\n    if (event === 'ready') {\n      // we can assume new tab\n      var sourceParam = urlSearchParamsObject.get('ds_drt_open');\n\n      if (sourceParam === '1') {\n        setTimeout(() => {\n          drift.api.openChat();\n        }, 300);\n      }\n    }\n\n    // all button click events\n    if (event === 'conversation:buttonClicked') {\n      if (eventData.buttonBody === 'Okay.') {\n        drift.api.startInteraction({ interactionId: 349413 });\n      }\n\n      if (eventData.buttonBody === 'Transfer to support') {\n        var enablePreviewSupportEnvironment = urlSearchParamsObject.get('ds_drt_enablePreviewSupport');\n      \n        drift.api.startInteraction({ interactionId: 349413 });\n\n        drift.api.openChat();\n        \n        setTimeout(() => {\n          drift.api.toggleChat();\n          setTimeout(() => {\n            setTimeout(() => {\n              drift.api.openChat();\n              setTimeout(() => {\n                setTimeout(() => {\n                  drift.api.toggleChat();\n                }, 500);\n              }, 333);\n            }, 500);\n          }, 500);\n        }, 10);\n\n        window.parent.postMessage({\n          type: 'ds_drift_redirect', \n          event, \n          url: ( enablePreviewSupportEnvironment ? \n              'https://docusign--sfprojuat.sandbox.my.site.com/s/contactSupport?language=en_US&transfer=dc' : 'https://support.docusign.com/s/contactSupport?language=en_US&transfer=dc'\n          )\n        }, '*');\n      }\n\n      /*\n        The following two blocks are related to other choices of confirmations within the Drift chat UI in which\n        the user is presented choices on IF the last message sent to the user was ideal/helpful for the moment...\n        either choice will send a message to the parent window which then will be sent to GA\n      */\n      if (eventData.buttonBody === 'Yes' || eventData.buttonBody === 'No') {\n        var respValue = eventData.buttonBody === 'Yes' ? 'Response was helpful' : 'Response was not helpful';\n        window.parent.postMessage({type: 'ds_drift_was_helpful_response', event, value: respValue}, '*');\n      }\n\n      if (eventData.buttonBody === \"I'm all set.\" || eventData.buttonBody === 'Connect me.') {\n        var respValue = eventData.buttonBody === \"I'm all set.\" ? 'Response was helpful' : 'Response was not helpful';\n        window.parent.postMessage({type: 'ds_drift_was_helpful_response', event, value: respValue}, '*');\n      }\n\n      if (eventData.buttonBody === \"Yes, I agree.\") {\n        /*\n          This button body is related to the UI that is shown when a user has thru some means (consent updates from OTCC\n          for example) has set their \"has_consent\" attribute to false... when this happens the next time Drift UI will show\n          you will have a UI that gives you two choices... the \"Yes, I agree.\" is supposed to open the OTCC UI within the\n          parent window...\n        */\n        window.parent.postMessage({type: 'ds_drift_open_otcc', event}, '*');\n      }\n    }\n  });\n});\n\nwindow.addEventListener('message', function (event) {\n  if (event.source !== window.parent) {\n    return;\n  }\n\n  var message = event.data;\n\n  if (message && message.type === 'driftUpdateContext') {\n    drift('setContext', message.data);\n  }\n  \n  if (message && message.type === 'driftUpdateConfig') {\n    drift('config', message.data);\n  }\n\n  // set initial context, put widget in \"iframeMode\", load widget\n  if (message && message.type === 'driftSetContext') {\n    drift('setContext', message.data);\n    drift('config', {\n      iframeMode: true,\n      iframeSandbox:\n        'allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms',\n    });\n    drift('page');\n\n    /* \n      ds_a comes from the parent window via param\n    */\n    var drtId = urlSearchParamsObject.get('ds_drt_dsa'),\n        /*\n          the parent window's OTCC consent for functional cookies is passed as well via flag which\n          we then send to drift prior to starting up the window\n        */\n        hasFunctionalConsentFlag = urlSearchParamsObject.get('ds_drt_hfc') === \"1\" ? true : false,\n        /*\n          this is checking if a param has been passed in for a forced interaction ID upon startup\n          which is being sent by a URL search param value... \n          NOTE: realize that within GTM we have already scrubbed(via regex) for numbers so via \n          GTM there should be no way that anything other than what we should interpret as a number\n          got here... unless we are doing things more than one way...\n        */\n        forcedDriftInterationId = urlSearchParamsObject.get('ds_drt_fiid');\n    \n    /*\n      First argument is what will used as an identifier that will connect a single drift chat \n      session...\n      \n      In order to pass the information sooner, (and not do a supplemental setUserAttribute call) \n      we will be using the identify's call 2nd argument (3rd via drift function) so we dont have\n      to deal with a second call after the fact... also makes our callback \"user:attributesUpdated\"\n      dependable...\n      \n      We are adding the DS_A population on this side since the iframe already knows about it due\n      to param passing, before we were passing the ds_a in a separate message...\n      you can see this populate in drift's identify request/call (in the attributes object)\n    */\n    drift('identify', drtId, {ds_a: drtId, has_consent: hasFunctionalConsentFlag});\n    ds_drt_listeningForIdentifyReturnOnFirstInit = true;\n    drift('init', '27b83herk5tv');\n    drift('setUserAttributes', {ds_firstInit: true});\n\n    /*\n      if we are being forced a interaction id upon startup then we will end up having to pass that\n      ID in... this is separate from a message being passed in to force an interaction id\n    */\n    if (forcedDriftInterationId) {\n      /*\n        since its truthy, parseInt it as drift complains if it is not a number type...\n      */\n      forcedDriftInterationId = parseInt(forcedDriftInterationId, 10);\n\n      drift('startInteraction', {\n        \"interactionId\":forcedDriftInterationId,\n        \"goToConversation\":false\n        /*\n          we dont have to pass in \"replaceActiveConversation\" as that is being defaulted as true already...\n        */\n      })\n    }\n  }\n\n  if (message && message.type === 'ds_drift_setUserAttribute') {\n    if (drift.api) {\n      drift.api.setUserAttributes(message.data);\n    } else {\n      drift('setUserAttributes', message.data);\n    }\n  }\n\n  if (message && message.type === 'ds_drift_openChat') {\n    /* part of what enables the ability to receive the message to open chat when sent from the parent window */\n    if (drift.api) {\n      drift.api.openChat();\n    } else {\n      drift('openChat');\n    }\n  }\n});\n\ndrift('on', 'user:attributesUpdated', (event) => {\n  /*\n    the \"user:attributesUpdated\" event is the closest thing that we have right now to a callback/resolve...\n    it is fired when the response comes back from drift when a setUserAttributes call is done... sad thing\n    is that we are not passed back what was the corresponding attribute update that it was related to...\n    we can just have a var sit in scope/closure that we leave the last message tied to but that doesn't\n    guarantee they will come back in the order we sent it over... will think of such IF we need it later...\n  */\n  var attributesUpdatedObject = { type: 'ds_drift_attributes_updated' };\n  if (ds_drt_listeningForIdentifyReturnOnFirstInit) {\n    /*\n      this flag is only true before the init... so any other updated event will never go down this part\n      of the code path...\n    */\n    \n    ds_drt_listeningForIdentifyReturnOnFirstInit = false;\n    try {\n      window.localStorage.setItem(\"DS_DRT_FIRST_INIT\",\"1\")\n    } catch (er) {} finally {\n      wasFirstReloadInitialized = true;\n      attributesUpdatedObject.forceReload = true;\n    }\n  }\n  \n  window.parent.postMessage(attributesUpdatedObject, '*');\n});\n\n// indicate iframe is ready to receive context\nwindow.parent.postMessage({ type: 'driftIframeReady' }, '*');"
}